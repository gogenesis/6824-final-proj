// This program generates combination_tests.go. It can be invoked by running "go generate".
//
// Also, because this program is executable, it must be in package main.
// The compiler requires that it be in a folder named main, but
// we don't want to store it in a folder named main, so we tell the compiler to ignore this file
// when building with this second magic comment.
// +build ignore
//

package main

import (
	"fmt"
	"fsraft"
	"html/template"
	"os"
	"reflect"
	"runtime"
	"strings"
	"time"
)

func main() {
	genFile, err := os.Create("combination_test.go")
	assertNoError(err)
	defer genFile.Close()

	header := fmt.Sprintf(`// Code generated by generate_combination_tests.go. DO NOT EDIT.
// Generated at %v
// This file contains a unit test for every combination of functionality test
// (found in filesystem_tests.go) and difficulty (found in test_setup.go).

package fsraft

`, time.Now().Format("Mon Jan 2 3:04:05 PM"))
	genFile.Write([]byte(header))

	unitTestTemplate := template.Must(template.New("").Parse(
		`func Test{{.FileSystem}}_{{.Functionality}}_{{.Difficulty}}(t *testing.T) {
	runFunctionalityTestWithDifficulty(t, {{.Functionality}}, {{.Difficulty}})
}

`))
	type templateData struct {
		FileSystem    string
		Functionality string
		Difficulty    string
	}

	fileSystemName := "Clerk" // for all tests
	for _, functionalityFunc := range fsraft.FunctionalityTests {
		functionalityName := GetFunctionName(functionalityFunc)
		for _, difficultyFunc := range fsraft.Difficulties {
			difficultyName := GetFunctionName(difficultyFunc)

			// Assemble the parameters into a data struct
			data := templateData{
				FileSystem:    fileSystemName,
				Functionality: functionalityName,
				Difficulty:    difficultyName,
			}
			// Fill the test template and write it into the file
			unitTestTemplate.Execute(genFile, data)
		}
	}

}

func assertNoError(e error) {
	if e != nil {
		panic(e.Error())
	}
}

// Get the name of a function, not including its package.
func GetFunctionName(i interface{}) string {
	nameWithPackage := runtime.FuncForPC(reflect.ValueOf(i).Pointer()).Name()
	periodIndex := strings.Index(nameWithPackage, ".")
	return nameWithPackage[periodIndex+1:]
}
